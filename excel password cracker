import msoffcrypto
import itertools
from openpyxl import load_workbook

def try_password(file, password):
    try:
        file.load_key(password=password)
        return True
    except msoffcrypto.exceptions.InvalidKeyError:
        return False
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        return False

def find_numeric_password(file_path, output_path, max_length):
    with open(file_path, "rb") as f:
        file = msoffcrypto.OfficeFile(f)
        
        for length in range(1, max_length + 1):
            for password_tuple in itertools.product('0123456789', repeat=length):
                password = ''.join(password_tuple)
                if try_password(file, password):
                    try:
                        with open(output_path, "wb") as output_file:
                            file.decrypt(output_file)

                        # Verify if the decrypted file is not corrupted
                        load_workbook(output_path)
                        print(f"Password found: {password}")
                        return password
                    except msoffcrypto.exceptions.InvalidKeyError:
                        print(f"Failed to decrypt with password: {password}")
                        continue
                    except Exception as e:
                        print(f"Decrypted file verification failed for password: {password}, error: {e}")
                        continue

    print("Password not found.")
    return None

# Input and output file paths
input_file_path = 'input file path'
output_file_path = 'output file path'

# Maximum length of numeric password to try
max_password_length = 6

# Attempt to find the password and save decrypted file
password = find_numeric_password(input_file_path, output_file_path, max_password_length)

if password:
    print(f"The password for the file was: {password}")
else:
    print("Failed to find the password.")
